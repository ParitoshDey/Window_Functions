use mavenmovies; 
-- 1. **Rank the customers based on the total amount they've spent on rentals.**
select customer.customer_id,sum(payment.amount) as total_amount,
rank() over(order by sum(payment.amount) desc) as customers_rank
from customer
join rental on customer.customer_id = rental.customer_id
join payment on rental.rental_id = payment.payment_id
group by customer.customer_id
order by customers_rank;

-- 2. **Calculate the cumulative revenue generated by each film over time.**
select film.film_id,film.title,rental.rental_date,
sum(payment.amount) over(partition by film.film_id order by rental.rental_date) as cumulative_revenue
from payment
join rental on payment.rental_id = rental.rental_id
join inventory on rental.inventory_id = inventory.inventory_id
join film on inventory.film_id = film.film_id
order by rental_date;

-- 3. **Determine the average rental duration for each film, considering films with similar lengths.**
select film.film_id,film.title,film.length,
avg(film.rental_duration) over(partition by film.length order by film.length) as average_rental_duration
from film;


-- 4. **Identify the top 3 films in each category based on their rental counts.**

WITH RankedFilms AS (
    SELECT category.name AS category_name,film.title AS film_title,COUNT(rental.rental_id) AS rental_count,
	ROW_NUMBER() OVER (PARTITION BY film_category.category_id ORDER BY COUNT(rental.rental_id) DESC) AS ranking
    FROM rental
    JOIN inventory ON rental.inventory_id = inventory.inventory_id
    JOIN film ON inventory.film_id = film.film_id
    JOIN film_category ON film.film_id = film_category.film_id
    JOIN category ON film_category.category_id = category.category_id
    GROUP BY category.name, film.title, film_category.category_id
)
SELECT category_name,film_title,rental_count FROM RankedFilms WHERE ranking <= 3 ORDER BY category_name, ranking;



-- 5. **Calculate the difference in rental counts between each customer's total rentals and the average rentals
--  across all customers.**
WITH TotalRental AS (
    SELECT customer_id,
    COUNT(rental_id) OVER (PARTITION BY customer_id) AS count_rentals FROM rental
),
AverageRental AS (
    SELECT customer_id,
	AVG(COUNT(rental_id)) OVER () AS avg_rentals FROM rental
    GROUP BY customer_id
)
SELECT tr.customer_id,tr.count_rentals,ar.avg_rentals,tr.count_rentals - ar.avg_rentals AS rental_difference
FROM TotalRental tr
JOIN AverageRental ar ON tr.customer_id = ar.customer_id
ORDER BY tr.count_rentals DESC;


-- 6. **Find the monthly revenue trend for the entire rental store over time.**
WITH MonthlyRevenue AS (
    SELECT DISTINCT CONCAT(YEAR(rental_date), '-' ,MONTHNAME(rental_date)) AS month_year,
	SUM(payment.amount) OVER (ORDER BY YEAR(rental_date), MONTHNAME(rental_date)) AS revenue
    FROM rental
    JOIN payment ON rental.rental_id = payment.rental_id
)
SELECT month_year,revenue
FROM MonthlyRevenue
ORDER BY month_year;


-- 7. **Identify the customers whose total spending on rentals falls within the top 20% of all customers.**

WITH CustomerSpending AS (
    SELECT customer.customer_id,customer.first_name,customer.last_name,
	SUM(payment.amount) AS total_spending FROM payment
    JOIN customer ON payment.customer_id = customer.customer_id
    GROUP BY customer.customer_id, customer.first_name, customer.last_name
),
RankedCustomers AS (
    SELECT customer_id,first_name,last_name,total_spending,
	PERCENT_RANK() OVER (ORDER BY total_spending DESC) AS spending_percentile
    FROM CustomerSpending
)

SELECT customer_id,first_name,last_name,total_spending FROM RankedCustomers WHERE spending_percentile <= 0.2;
    



-- 8. **Calculate the running total of rentals per category, ordered by rental count.**
WITH CategoryRental AS (
    SELECT category.name AS category_name,COUNT(rental.rental_id) AS rental_count,
	ROW_NUMBER() OVER (PARTITION BY category.category_id ORDER BY COUNT(rental.rental_id) DESC) AS category_rank
    FROM rental
    JOIN inventory ON rental.inventory_id = inventory.inventory_id
    JOIN film_category ON inventory.film_id = film_category.film_id
    JOIN category ON film_category.category_id = category.category_id
    GROUP BY category.category_id,category.name
)
SELECT category_name,rental_count,
SUM(rental_count) OVER (ORDER BY category_rank) AS running_total
FROM CategoryRental
ORDER BY rental_count DESC;



-- 9. **Find the films that have been rented less than the average rental count for their respective categories.**

WITH CategoryRentalCounts AS (
    SELECT film.film_id,film.title,category.category_id,category.name AS category_name,
	COUNT(rental.rental_id) AS rental_count,
    AVG(COUNT(rental.rental_id)) OVER (PARTITION BY category.category_id) AS avg_rental_count
    FROM rental
    JOIN inventory ON rental.inventory_id = inventory.inventory_id
    JOIN film ON inventory.film_id = film.film_id
    JOIN film_category ON film.film_id = film_category.film_id
    JOIN category ON film_category.category_id = category.category_id
    GROUP BY film.film_id, film.title, category.category_id
)
SELECT film_id,title,category_id,category_name,rental_count,avg_rental_count
FROM CategoryRentalCounts
WHERE rental_count < avg_rental_count;



-- 10. **Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

WITH MonthlyRevenue AS (
    SELECT CONCAT(YEAR(payment.payment_date), '-' ,MONTHNAME(payment.payment_date)) AS month_year,
	SUM(payment.amount) AS total_revenue,
	ROW_NUMBER() OVER (ORDER BY SUM(payment.amount) DESC) AS row_num
    FROM payment
    GROUP BY month_year
)
SELECT month_year,total_revenue,row_num
FROM MonthlyRevenue WHERE row_num <= 5;








